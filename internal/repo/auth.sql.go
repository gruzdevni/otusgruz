// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const insertSession = `-- name: InsertSession :exec
INSERT INTO logged_in (user_guid, expiry)
VALUES ($1, now() + INTERVAL '48 hours') ON CONFLICT (user_guid) DO
UPDATE
SET expiry = now() + INTERVAL '48 hours'
`

func (q *Queries) InsertSession(ctx context.Context, userGuid uuid.UUID) error {
	_, err := q.exec(ctx, q.insertSessionStmt, insertSession, userGuid)
	return err
}

const isAuth = `-- name: IsAuth :one
SELECT user_guid, expiry FROM logged_in WHERE user_guid = $1 AND expiry > now()
`

func (q *Queries) IsAuth(ctx context.Context, guid uuid.UUID) (LoggedIn, error) {
	row := q.queryRow(ctx, q.isAuthStmt, isAuth, guid)
	var i LoggedIn
	err := row.Scan(&i.UserGuid, &i.Expiry)
	return i, err
}
