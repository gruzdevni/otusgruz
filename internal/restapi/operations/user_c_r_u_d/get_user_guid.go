// Code generated by go-swagger; DO NOT EDIT.

package user_c_r_u_d

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserGUIDHandlerFunc turns a function with the right signature into a get user GUID handler
type GetUserGUIDHandlerFunc func(GetUserGUIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserGUIDHandlerFunc) Handle(params GetUserGUIDParams) middleware.Responder {
	return fn(params)
}

// GetUserGUIDHandler interface for that can handle valid get user GUID params
type GetUserGUIDHandler interface {
	Handle(GetUserGUIDParams) middleware.Responder
}

// NewGetUserGUID creates a new http.Handler for the get user GUID operation
func NewGetUserGUID(ctx *middleware.Context, handler GetUserGUIDHandler) *GetUserGUID {
	return &GetUserGUID{Context: ctx, Handler: handler}
}

/*
	GetUserGUID swagger:route GET /user/{guid} User CRUD getUserGuid

Получение информации по пользователю
*/
type GetUserGUID struct {
	Context *middleware.Context
	Handler GetUserGUIDHandler
}

func (o *GetUserGUID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserGUIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
